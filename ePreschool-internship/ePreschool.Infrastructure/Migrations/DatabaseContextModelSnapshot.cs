// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ePreschool.Infrastructure;

#nullable disable

namespace ePreschool.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ePreschool.Core.Entities.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IDNumber")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<int>("PreschoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreschoolId");

                    b.ToTable("BusinessUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "Sjeverni Logor 12",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Email = "zemzem_sjeverni@gmail.com",
                            IDNumber = "643218645312",
                            IsDeleted = false,
                            Name = "ZemZem Sjeveni",
                            PhoneNumber = "+387 36 333 333",
                            PostalCode = "88208",
                            PreschoolId = 1
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "Zalik 12b",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Email = "zemzem_zalik@gmail.com",
                            IDNumber = "985518645312",
                            IsDeleted = false,
                            Name = "ZemZem Zalik",
                            PhoneNumber = "+387 36 111 333",
                            PostalCode = "88208",
                            PreschoolId = 1
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.BusinessUnitProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("ProgramId");

                    b.ToTable("BusinessUnitPrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessUnitId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            ProgramId = 1
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<int>("AlternativeBusinessUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("ChildDevelopmentStatus")
                        .HasColumnType("integer");

                    b.Property<int>("CityOfBirthId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryOfBirthId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DiagnosticProcedure")
                        .HasColumnType("integer");

                    b.Property<int>("FamilyMembers")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("GUID")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PreschoolId")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousPreschool")
                        .HasColumnType("text");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<bool>("Rehabilitation")
                        .HasColumnType("boolean");

                    b.Property<string>("Siblings")
                        .HasColumnType("text");

                    b.Property<string>("SpecificHealthNeeds")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlternativeBusinessUnitId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CityOfBirthId");

                    b.HasIndex("CountryOfBirthId");

                    b.HasIndex("PreschoolId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Children");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adress = "Solakovica br. 3",
                            AlternativeBusinessUnitId = 2,
                            BirthDate = new DateTime(2022, 9, 14, 3, 18, 2, 182, DateTimeKind.Local).AddTicks(2082),
                            BusinessUnitId = 1,
                            ChildDevelopmentStatus = 0,
                            CityOfBirthId = 2,
                            CountryOfBirthId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            FamilyMembers = 4,
                            FirstName = "Alin",
                            IsDeleted = false,
                            LastName = "Kajtaz",
                            PreschoolId = 1,
                            ProgramId = 1,
                            Rehabilitation = false
                        },
                        new
                        {
                            Id = 2,
                            Adress = "Solakovica br. 3",
                            AlternativeBusinessUnitId = 2,
                            BirthDate = new DateTime(2022, 9, 14, 3, 18, 2, 182, DateTimeKind.Local).AddTicks(2087),
                            BusinessUnitId = 1,
                            ChildDevelopmentStatus = 0,
                            CityOfBirthId = 2,
                            CountryOfBirthId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            FamilyMembers = 4,
                            FirstName = "Nadja",
                            IsDeleted = false,
                            LastName = "Kajtaz",
                            PreschoolId = 1,
                            ProgramId = 1,
                            Rehabilitation = false
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = true,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Bihać"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 2,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Zagreb"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 2,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Split"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "BIH",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = true,
                            Name = "Bosna i Hercegovina"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "HR",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Hrvatska"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "SR",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Srbija"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "CG",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Crna Gora"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "SLO",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Slovenija"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "A",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Austrija"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "MKD",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            IsFavorite = false,
                            Name = "Makedonija"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("RoleLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("SignInAllowed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "1547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMINISTRATOR",
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Ministry",
                            NormalizedName = "MINISTRY",
                            RoleLevel = 1,
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "PreschoolAdministrator",
                            NormalizedName = "PRESCHOOLADMINISTRATOR",
                            RoleLevel = 2,
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "4547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "PreschoolManagement",
                            NormalizedName = "PRESCHOOLMANAGEMENT",
                            RoleLevel = 3,
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "5547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "BusinessUnitAdministrator",
                            NormalizedName = "BUSINESSUNITADMINISTRATOR",
                            RoleLevel = 4,
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "6547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "BusinessUnitEmployee",
                            NormalizedName = "BUSINESSUNITEMPLOYEE",
                            RoleLevel = 5,
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "7547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Parent",
                            NormalizedName = "PARENT",
                            RoleLevel = 6,
                            SignInAllowed = false
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "8547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "Expert",
                            NormalizedName = "EXPERT",
                            RoleLevel = 7,
                            SignInAllowed = false
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AlternativePhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CurrentBusinessUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<int?>("PreschoolId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoThumbnail")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrentBusinessUnitId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PreschoolId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Active = false,
                            CityId = 1,
                            ConcurrencyStamp = "9547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Email = "admin@preschool.ba",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            Gender = 2,
                            IsDeleted = false,
                            LastName = "PreSchool",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@PRESCHOOL.BA",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "/jgjzf1nC8YDuZMV5q0kYrRqIarjCDgWjBERaZiyyO0=",
                            PasswordSalt = "DFQVcTkMv8qWjq/5ars8Eg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Active = false,
                            CityId = 1,
                            ConcurrencyStamp = "9547f983-1707-49d3-9390-5ec84ec35dca",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Email = "manager@preschool.ba",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            Gender = 2,
                            IsDeleted = false,
                            LastName = "PreSchool",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@PRESCHOOL.BA",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "/jgjzf1nC8YDuZMV5q0kYrRqIarjCDgWjBERaZiyyO0=",
                            PasswordSalt = "DFQVcTkMv8qWjq/5ars8Eg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicationRoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PreschoolId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("PreschoolId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Id = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Id = 2,
                            IsDeleted = false,
                            PreschoolId = 1
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentUrl")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExceptionStackTrace")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReferrerUrl")
                        .HasColumnType("text");

                    b.Property<int?>("RowId")
                        .HasColumnType("integer");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("Employed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployerAdress")
                        .HasColumnType("text");

                    b.Property<int?>("EmployerCityId")
                        .HasColumnType("integer");

                    b.Property<string>("EmployerName")
                        .HasColumnType("text");

                    b.Property<string>("EmployerPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployerCityId");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 9, 14, 3, 18, 2, 182, DateTimeKind.Local).AddTicks(2056),
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            EducationLevel = 7,
                            Email = "admir@gmail.com",
                            Employed = true,
                            FirstName = "Admir",
                            IsDeleted = false,
                            LastName = "Kajtaz",
                            PhoneNumber = "+387 61 333 333",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.ParentChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("ParentId");

                    b.ToTable("ParentChildren");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChildId = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            IsDeleted = false,
                            ParentId = 1
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Preschool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IDNumber")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<bool>("InVatSystem")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("LogoThumbnail")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("text");

                    b.Property<bool>("VatIncludedInPrice")
                        .HasColumnType("boolean");

                    b.Property<string>("WebPage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Preschools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "Sjeverni Logor 12",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Email = "zemzem@gmail.com",
                            InVatSystem = false,
                            IsDeleted = false,
                            Name = "ZemZem",
                            PhoneNumber = "+387 36 222 333",
                            PostalCode = "88208",
                            TaxNumber = "65487978654654",
                            VatIncludedInPrice = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "Alekse Šantića 5",
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Email = "djecija.radost@gmail.com",
                            InVatSystem = false,
                            IsDeleted = false,
                            Name = "Djecija radost",
                            PhoneNumber = "+387 36 222 333",
                            PostalCode = "88208",
                            TaxNumber = "65487978654654",
                            VatIncludedInPrice = false
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.WorkingProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfHours")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Programs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Description = "All day",
                            IsDeleted = false,
                            Name = "All day",
                            NumberOfHours = 10
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Description = "Half day",
                            IsDeleted = false,
                            Name = "Half day",
                            NumberOfHours = 5
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Description = "Nursery",
                            IsDeleted = false,
                            Name = "Nursery",
                            NumberOfHours = 10
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 6, 10, 1, 22, 18, 866, DateTimeKind.Local),
                            Description = "Playroom",
                            IsDeleted = false,
                            Name = "Playroom",
                            NumberOfHours = 3
                        });
                });

            modelBuilder.Entity("ePreschool.Core.Entities.BusinessUnit", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Preschool", "Preschool")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("PreschoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preschool");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.BusinessUnitProgram", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.WorkingProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Child", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.BusinessUnit", "AlternativeBusinessUnit")
                        .WithMany()
                        .HasForeignKey("AlternativeBusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.City", "CityOfBirth")
                        .WithMany()
                        .HasForeignKey("CityOfBirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Country", "CountryOfBirth")
                        .WithMany()
                        .HasForeignKey("CountryOfBirthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Preschool", "Preschool")
                        .WithMany()
                        .HasForeignKey("PreschoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.WorkingProgram", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternativeBusinessUnit");

                    b.Navigation("BusinessUnit");

                    b.Navigation("CityOfBirth");

                    b.Navigation("CountryOfBirth");

                    b.Navigation("Preschool");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.City", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ePreschool.Core.Entities.BusinessUnit", "CurrentBusinessUnit")
                        .WithMany()
                        .HasForeignKey("CurrentBusinessUnitId");

                    b.HasOne("ePreschool.Core.Entities.Preschool", "Preschool")
                        .WithMany()
                        .HasForeignKey("PreschoolId");

                    b.Navigation("City");

                    b.Navigation("CurrentBusinessUnit");

                    b.Navigation("Preschool");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationRole", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ePreschool.Core.Entities.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId");

                    b.HasOne("ePreschool.Core.Entities.Preschool", "Preschool")
                        .WithMany()
                        .HasForeignKey("PreschoolId");

                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("Preschool");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Parent", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.City", "EmployerCity")
                        .WithMany()
                        .HasForeignKey("EmployerCityId");

                    b.HasOne("ePreschool.Core.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EmployerCity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.ParentChild", b =>
                {
                    b.HasOne("ePreschool.Core.Entities.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ePreschool.Core.Entities.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationRole", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ePreschool.Core.Entities.Preschool", b =>
                {
                    b.Navigation("BusinessUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
